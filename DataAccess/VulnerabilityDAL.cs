using System;
using Oracle.DataAccess.Client;
using System.Data;
using WIS_BusinessObjects;

namespace WIS_DataAccess
{
    public class VulnerabilityDAL
    {
        string returnResult = string.Empty;

        /// <summary>
        /// To Insert
        /// </summary>
        /// <param name="VulnerabilityBOobj"></param>
        /// <returns></returns>
        public string insert(VulnerabilityBO VulnerabilityBOobj)
        {
            OracleConnection con = new OracleConnection(AppConfiguration.ConnectionString);
            con.Open();
            OracleCommand dcmd = new OracleCommand("USP_MST_INS_VUL", con);
            dcmd.CommandType = CommandType.StoredProcedure;
            int count = Convert.ToInt32(dcmd.CommandType);
            try
            {
                dcmd.Parameters.Add("p_VULNERABILITY", VulnerabilityBOobj.VulnerabilityType);
                dcmd.Parameters.Add("p_CREATEDBY", VulnerabilityBOobj.CreatedBy);
                //return dcmd.ExecuteNonQuery();
                dcmd.Parameters.Add("errorMessage_", OracleDbType.Varchar2, 500).Direction = ParameterDirection.Output;

                dcmd.ExecuteNonQuery();

                if (dcmd.Parameters["errorMessage_"].Value != null)
                    returnResult = dcmd.Parameters["errorMessage_"].Value.ToString();
                else
                    returnResult = string.Empty;     
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                dcmd.Dispose();
                con.Close();
                con.Dispose();

            }
            return returnResult;
        }

        /// <summary>
        /// TO Get ALL Vulnerability
        /// </summary>
        /// <returns></returns>
        public VulnerabilityList GetALLVulnerability()
        {
            OracleConnection cnn = new OracleConnection(AppConfiguration.ConnectionString);
            OracleCommand cmd;

            string proc = " USP_MST_GETALL_VUL";

            cmd = new OracleCommand(proc, cnn);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add("Sp_recordset", OracleDbType.RefCursor).Direction = ParameterDirection.Output;

            cmd.Connection.Open();
            OracleDataReader dr = cmd.ExecuteReader(CommandBehavior.CloseConnection);
            VulnerabilityBO objUser = null;
            VulnerabilityList Users = new VulnerabilityList();

            while (dr.Read())
            {
                objUser = new VulnerabilityBO();
                objUser.VulnerabilityID = Convert.ToInt32(dr.GetValue(dr.GetOrdinal("DISABILITYID")));
                objUser.VulnerabilityType = dr.GetString(dr.GetOrdinal("DISABILITYNAME"));
                objUser.IsDeleted = dr.GetString(dr.GetOrdinal("IsDeleted"));

                Users.Add(objUser);
            }

            dr.Close();

            return Users;
        }

        /// <summary>
        /// To Get Vulnerability
        /// </summary>
        /// <returns></returns>
        public VulnerabilityList GetVulnerability()
        {
            OracleConnection cnn = new OracleConnection(AppConfiguration.ConnectionString);
            OracleCommand cmd;

            string proc = " USP_MST_GET_VUL";

            cmd = new OracleCommand(proc, cnn);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add("Sp_recordset", OracleDbType.RefCursor).Direction = ParameterDirection.Output;

            cmd.Connection.Open();
            OracleDataReader dr = cmd.ExecuteReader(CommandBehavior.CloseConnection);
            VulnerabilityBO objUser = null;
            VulnerabilityList Users = new VulnerabilityList();

            while (dr.Read())
            {
                objUser = new VulnerabilityBO();
                objUser.VulnerabilityID = Convert.ToInt32(dr.GetValue(dr.GetOrdinal("DISABILITYID")));
                objUser.VulnerabilityType = dr.GetString(dr.GetOrdinal("DISABILITYNAME"));

                Users.Add(objUser);
            }

            dr.Close();

            return Users;
        }

        /// <summary>
        /// To Delete vulnerability
        /// </summary>
        /// <param name="VulnerabilityID"></param>
        /// <returns></returns>
        public string Deletevulnerability(int VulnerabilityID)
        {
            OracleConnection myConnection = null;
            OracleCommand myCommand = null;

            string result = string.Empty;
            try
            {

                myConnection = new OracleConnection(AppConfiguration.ConnectionString);
                myCommand = new OracleCommand("USP_MST_DELETEVUL", myConnection);
                myCommand.Connection = myConnection;
                myCommand.CommandType = CommandType.StoredProcedure;
                myCommand.Parameters.Add("p_VULNERABILITYID", VulnerabilityID);
                myCommand.Parameters.Add("errorMessage_", OracleDbType.Varchar2, 500).Direction = ParameterDirection.Output;
                myConnection.Open();
                myCommand.ExecuteNonQuery();
                if (myCommand.Parameters["errorMessage_"].Value != null)
                    result = myCommand.Parameters["errorMessage_"].Value.ToString();
            }
            catch (Exception ex)
            {
                if (ex.Message.Contains("ORA-02292"))
                {
                    result = "Selected item is already in use. Connot delete";
                }
                else
                {
                    throw ex;
                }
            }
            finally
            {
                myCommand.Dispose();
                myConnection.Close();
                myConnection.Dispose();
            }

            return result;

            }
        
        /// <summary>
        /// To Get Vulnerablity by ID
        /// </summary>
        /// <param name="VulnerabilityID"></param>
        /// <returns></returns>
        public VulnerabilityBO GetVulnerablitybyID(int VulnerabilityID)
        {
            OracleConnection cnn = new OracleConnection(AppConfiguration.ConnectionString);
            OracleCommand cmd;

            string proc = "USP_MST_GETSEL_VUL";

            cmd = new OracleCommand(proc, cnn);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add("p_VULNERABILITYID", VulnerabilityID);
            cmd.Parameters.Add("Sp_recordset", OracleDbType.RefCursor).Direction = ParameterDirection.Output;

            cmd.Connection.Open();

            OracleDataReader dr = cmd.ExecuteReader(CommandBehavior.CloseConnection);
            VulnerabilityBO VulnerabilityBOobj = null;
            VulnerabilityList Users = new VulnerabilityList();

            VulnerabilityBOobj = new VulnerabilityBO();
            while (dr.Read())
            {
                if (!dr.IsDBNull(dr.GetOrdinal("DISABILITYNAME")))
                    VulnerabilityBOobj.VulnerabilityType = dr.GetString(dr.GetOrdinal("DISABILITYNAME"));
                if (!dr.IsDBNull(dr.GetOrdinal("DISABILITYID")))
                    VulnerabilityBOobj.VulnerabilityID = Convert.ToInt32(dr.GetValue(dr.GetOrdinal("DISABILITYID")));

            }
            dr.Close();


            return VulnerabilityBOobj;
        }

        /// <summary>
        /// To Update
        /// </summary>
        /// <param name="VulnerabilityBOobj"></param>
        /// <param name="VulnerabilityID"></param>
        /// <returns></returns>
        public string Update(VulnerabilityBO VulnerabilityBOobj, int VulnerabilityID)
        {
            string returnResult = string.Empty;

            OracleConnection conn = new OracleConnection(AppConfiguration.ConnectionString);
            conn.Open();
            OracleCommand dCmd = new OracleCommand("USP_MST_UPD_VUL", conn);
            dCmd.CommandType = CommandType.StoredProcedure;
            try
            {
                dCmd.Parameters.Add("p_VULNERABILITYID", VulnerabilityID);
                dCmd.Parameters.Add("p_MST_VULNERABILITY", VulnerabilityBOobj.VulnerabilityType);
                dCmd.Parameters.Add("p_UPDATEDBY", VulnerabilityBOobj.CreatedBy);

                dCmd.Parameters.Add("errorMessage_", OracleDbType.Varchar2, 500).Direction = ParameterDirection.Output;

                dCmd.ExecuteNonQuery();

                if (dCmd.Parameters["errorMessage_"].Value != null)
                    returnResult = dCmd.Parameters["errorMessage_"].Value.ToString();
                else
                    returnResult = string.Empty;     
            }
            catch (Exception ex)
            {

                throw ex;
            }
            finally
            {
                dCmd.Dispose();
                conn.Close();
                conn.Dispose();
            }
            return returnResult;
        }

        /// <summary>
        /// To Obsolete vulnerability
        /// </summary>
        /// <param name="VulnerabilityID"></param>
        /// <param name="IsDeleted"></param>
        /// <returns></returns>
        public string Obsoletevulnerability(int VulnerabilityID, string IsDeleted)
        {
            OracleConnection myConnection = null;
            OracleCommand myCommand = null;
            string result = string.Empty;
            try
            {

                myConnection = new OracleConnection(AppConfiguration.ConnectionString);
                myCommand = new OracleCommand("USP_MST_OBSOLETE_VUL", myConnection);
                myCommand.Connection = myConnection;
                myCommand.CommandType = CommandType.StoredProcedure;
                myCommand.Parameters.Add("VULNERABILITYID_", VulnerabilityID);
                myCommand.Parameters.Add("isdeleted_", IsDeleted);
                myCommand.Parameters.Add("errorMessage_", OracleDbType.Varchar2, 500).Direction = ParameterDirection.Output;
                myConnection.Open();
                myCommand.ExecuteNonQuery();
                if (myCommand.Parameters["errorMessage_"].Value != null)
                    result = myCommand.Parameters["errorMessage_"].Value.ToString();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                myCommand.Dispose();
                myConnection.Close();
                myConnection.Dispose();
            }

            return result;
        }


    }
}